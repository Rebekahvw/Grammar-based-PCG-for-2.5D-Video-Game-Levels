import networkx as nx
import numpy as np
from collections import defaultdict
from PIL import Image #represent level as image
import random 

from path_functions import *
from river_functions import *
# from grass_functions import *
# from empty_functions import *

"""

Rogue-like domain

Within this particular domain, the world or level is represented as a two-dimensional grid consisting of cells. 
However, in this scenario, each cell can exist in any one of 38 distinct states. 
The motivation behind this particular domain was twofold; firstly, it was intended to utilize domains with similar characteristics to previous works. Secondly, it was designed as a more intricate iteration of the Maze domain that could be observed in contemporary video games.

green - grass
blue - river
red - path
pink - bridge
black - wall
yellow - houses
white - gate
dark green - trees

"""

def represent_graph(G):

    # a function to convert a graph into an image of a level
    
    # if the level is binary, just have to consider 1s and 0s. Else, have a lot more to consider.
    # matrix_rep is the matrix representation of the level (generated by matrix_representation)
    node_type = nx.get_node_attributes(G, 'type')

    image = np.zeros((31, 31, 3), dtype=np.uint8)
    
    for y in range(31):
        for x in range(31):

            type = node_type[x,y]
            if type =='grass'or type=="irreplaceable_grass": # light green
                image[x][y]=[31,198,0]
            elif type =='path': #dull red/maroon
                image[x][y]=[151,59,50]
            elif type =='empty':#white
                image[x][y]=[100,100,100] 
            elif type =='out-of-bounds': #purple
                image[x][y]=[132,89,126]
            elif type =='river': #blue
                image[x][y]=[0,23,248]
            elif type =='house': #yellow
                image[x][y]=[255,254,72]
            elif type =='bridge': #coral/pink
                image[x][y]=[234,63,35]
            elif type =='wall': #black
                image[x][y]=[0,0,0]
            elif type =='indoors': #grey
                image[x][y]=[127,127,127]
            elif type =='doorway': #beige
                image[x][y]=[232,220,202]
            elif type =='tree': #green
                image[x][y]=[0,103,26] 
            
    level = Image.fromarray(image, "RGB")
    return level

def initial_graph(dimensions):

    G=nx.grid_graph(dim=dimensions) 
    
    for node in G.nodes:
        x, y = node #gets label of node, which corresponds to its coordinate/position in the grid
    
        # Check if the node is on the edge of the grid, then sets the type to out of bounds
        # else, sets type to "empty". empty cells are non-terminal cells that have to be replaced before the level can be called complete
        
        if x == 0 or x == dimensions[0]-1 or y == 0 or y == dimensions[1]-1:
            G.nodes[node]['type'] = 'out-of-bounds'
        else:
            G.nodes[node]['type'] = 'empty'

    return G

def eight_connected_neighbours(G, node):
    directions = [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]
    eight_direction_neighbours = []
    for dx, dy in directions:
        neighbour_x, neighbour_y = node[0] + dx, node[1] + dy
        if (neighbour_x, neighbour_y) in G.nodes:
            eight_direction_neighbours.append((neighbour_x, neighbour_y))

    return eight_direction_neighbours

def create_level(dimensions):
    # dimensions should include an extra 1 in each direction for out of bounds nodes
    # must be square

    G = initial_graph(dimensions) # [31,31] for dimensions for our purposes

    # finding the centre node if possible, and a near-centre node if not

    if (dimensions[0]-1)%2==0:
        centre_x=(dimensions[0]-1)/2
    else:
        centre_x = (dimensions[0]-2)/2
    
    if (dimensions[1]-1)%2==0:
        centre_y=(dimensions[0]-1)/2
    else:
        centre_y = (dimensions[1]-2)/2

    # set the centre node to be either grass or path randomly

    G.nodes[(centre_x, centre_y)]['type'] = random.choice(['path'])
    source_node = (centre_x, centre_y)

    random.seed(100)
 
    queue = [source_node]
    visited = set()
    counter = 0

    #make_forked_road(G, (14, 15) )
    # make_grass_node(G, (15, 14) )
    # make_vertical_path(G, (16, 15) )
    # make_horizontal_path(G, (15, 16) )
    # make_horizontal_path(G, (13, 15) ) 
    # make_vertical_path(G, (15.0, 15.0) )
    # print(G.nodes[(15, 14)]['type'])
    # make_grass_node(G, (15, 14) )
    # make_grass_node(G, (15, 16) )
    # make_horizontal_river(G, (13, 15) ) going to right
    # make_grass_node(G, (14, 14) )
    # make_horizontal_path(G, (17, 15) ) going right
    # make_grass_node(G, (15, 17) )
    # make_grass_node(G, (12, 15) )
    # make_horizontal_river(G, (13, 14) ) going to left
    # make_vertical_river(G, (14, 17) ) going downwards
    # make_grass_node(G, (16, 13) )
    # make_grass_node(G, (17, 14) )
    # make_grass_node(G, (18, 15) )
    # make_horizontal_river(G, (16, 17) ) going to right
    # make_grass_node(G, (11, 15) )
    # make_grass_node(G, (12, 14) )
    # make_horizontal_river(G, (13, 17) ) going to right
    # make_vertical_river(G, (14, 12) ) going downwards
    # make_vertical_river(G, (16, 12) ) going downwards
    # make_grass_node(G, (19, 15) )
    # make_grass_node(G, (15, 19) )
    # make_vertical_river(G, (11, 14) ) going upwards
    # make_grass_node(G, (11, 16) )
    # make_grass_node(G, (12, 17) )
    # make_horizontal_river(G, (13, 12) ) going to left
    # make_grass_node(G, (14, 19) )
    # make_grass_node(G, (15, 10) )
    # make_grass_node(G, (16, 11) )
    # make_grass_node(G, (18, 13) )
    # make_grass_node(G, (19, 14) )
    # make_grass_node(G, (20, 15) )
    # make_horizontal_river(G, (18, 17) ) going to right
    # make_horizontal_river(G, (16, 19) ) going to right
    # make_vertical_river(G, (9, 15) ) going upwards
    # make_grass_node(G, (10, 16) )
    # make_grass_node(G, (11, 13) )
    # make_grass_node(G, (11, 17) )
    # make_grass_node(G, (12, 12) )
    # make_horizontal_river(G, (13, 19) ) going to right
    # make_vertical_river(G, (14, 10) ) going downwards
    # make_vertical_river(G, (16, 10) ) going downwards
    # make_horizontal_river(G, (18, 12) ) going to right
    # make_grass_node(G, (21, 15) )
    # make_grass_node(G, (20, 16) )
    # make_grass_node(G, (19, 17) )
    # make_grass_node(G, (17, 19) )
    # make_grass_node(G, (15, 21) )
    # make_horizontal_river(G, (9, 14) ) going to left
    # make_grass_node(G, (9, 16) )
    # make_grass_node(G, (10, 17) )
    # make_grass_node(G, (11, 12) )
    # make_grass_node(G, (12, 19) )
    # make_vertical_river(G, (13, 10) ) going upwards
    # make_grass_node(G, (14, 9) )
    # make_grass_node(G, (14, 21) )
    # make_grass_node(G, (15, 8) )
    # make_grass_node(G, (16, 9) )
    # make_grass_node(G, (18, 11) )
    # make_grass_node(G, (19, 12) )
    # make_horizontal_river(G, (20, 13) ) going to right
    # make_grass_node(G, (22, 15) )
    # make_grass_node(G, (20, 17) )
    # make_horizontal_river(G, (18, 19) ) going to right
    # make_horizontal_river(G, (16, 21) ) going to right
    # make_vertical_river(G, (7, 15) ) going upwards
    # make_grass_node(G, (9, 17) )
    # make_grass_node(G, (10, 12) )
    # make_grass_node(G, (10, 18) )
    # make_grass_node(G, (11, 11) )
    # make_grass_node(G, (13, 9) )
    # make_vertical_river(G, (13, 21) ) going downwards
    # make_grass_node(G, (14, 8) )
    # make_grass_node(G, (16, 8) )
    # make_horizontal_river(G, (18, 10) ) going to left
    # make_horizontal_river(G, (20, 12) ) going to left
    # make_grass_node(G, (21, 13) )
    # make_grass_node(G, (23, 15) )
    # make_horizontal_river(G, (22, 16) ) going to left
    # make_horizontal_river(G, (21, 17) ) going to right
    # make_grass_node(G, (19, 19) )
    # make_grass_node(G, (17, 21) )
    # make_vertical_river(G, (15, 23) ) going upwards
    # make_grass_node(G, (7, 14) )
    # make_grass_node(G, (7, 16) )
    # make_grass_node(G, (8, 17) )
    # make_vertical_river(G, (9, 12) ) going upwards
    # make_vertical_river(G, (9, 18) ) going downwards
    # make_grass_node(G, (10, 11) )
    # make_horizontal_river(G, (11, 10) ) going to right
    # make_grass_node(G, (11, 20) )
    # make_grass_node(G, (12, 21) )
    # make_grass_node(G, (13, 8) )
    # make_grass_node(G, (13, 22) )
    # make_horizontal_river(G, (15, 6) ) going to right
    # make_grass_node(G, (17, 8) )
    # make_grass_node(G, (19, 10) )
    # make_grass_node(G, (21, 12) )
    # make_grass_node(G, (22, 13) )
    # make_grass_node(G, (23, 14) )
    # make_grass_node(G, (24, 15) )
    # make_grass_node(G, (23, 16) )
    # make_grass_node(G, (22, 17) )
    # make_grass_node(G, (20, 19) )
    # make_horizontal_river(G, (18, 21) ) going to right
    # make_horizontal_river(G, (16, 23) ) going to right
    # make_vertical_river(G, (5, 15) ) going upwards
    # make_grass_node(G, (7, 13) )
    # make_grass_node(G, (7, 17) )
    # make_grass_node(G, (8, 18) )
    # make_grass_node(G, (9, 11) )
    # make_grass_node(G, (9, 19) )
    # make_grass_node(G, (10, 10) )
    # make_grass_node(G, (10, 20) )
    # make_grass_node(G, (11, 9) )
    # make_vertical_river(G, (13, 23) ) going upwards
    # make_grass_node(G, (14, 6) )
    # make_grass_node(G, (16, 6) )
    # make_grass_node(G, (17, 7) )
    # make_horizontal_river(G, (18, 8) ) going to left
    # make_horizontal_river(G, (20, 10) ) going to left
    # make_grass_node(G, (22, 12) )
    # make_grass_node(G, (23, 13) )
    # make_grass_node(G, (25, 15) )
    # make_grass_node(G, (24, 16) )
    # make_grass_node(G, (23, 17) )
    # make_horizontal_river(G, (21, 19) ) going to right
    # make_grass_node(G, (19, 21) )
    # make_grass_node(G, (17, 23) )
    # make_grass_node(G, (15, 25) )
    # make_grass_node(G, (5, 14) )
    # make_grass_node(G, (5, 16) )
    # make_grass_node(G, (6, 13) )
    # make_grass_node(G, (6, 17) )
    # make_vertical_river(G, (7, 12) ) going upwards
    # make_grass_node(G, (8, 19) )
    # make_grass_node(G, (9, 10) )
    # make_grass_node(G, (9, 20) )
    # make_grass_node(G, (10, 9) )
    # make_vertical_river(G, (10, 21) ) going downwards
    # make_grass_node(G, (11, 8) )
    # make_grass_node(G, (12, 7) )
    # make_vertical_river(G, (13, 6) ) going upwards
    # make_grass_node(G, (13, 24) )
    # make_grass_node(G, (14, 5) )
    # make_grass_node(G, (14, 25) )
    # make_grass_node(G, (16, 5) )
    # make_grass_node(G, (17, 6) )
    # make_grass_node(G, (19, 8) )
    # make_grass_node(G, (21, 10) )
    # make_grass_node(G, (22, 11) )
    # make_horizontal_river(G, (24, 13) ) going to right
    # make_grass_node(G, (26, 15) )
    # make_horizontal_river(G, (24, 17) ) going to right
    # make_grass_node(G, (22, 19) )
    # make_grass_node(G, (20, 21) )
    # make_horizontal_river(G, (18, 23) ) going to right
    # make_vertical_river(G, (16, 25) ) going upwards
    # make_horizontal_river(G, (3, 15) ) going to right
    # make_grass_node(G, (5, 13) )
    # make_grass_node(G, (5, 17) )
    # make_grass_node(G, (6, 18) )
    # make_grass_node(G, (7, 11) )
    # make_grass_node(G, (8, 10) )
    # make_grass_node(G, (8, 20) )
    # make_grass_node(G, (9, 9) )
    # make_grass_node(G, (9, 21) )
    # make_grass_node(G, (10, 8) )
    # make_grass_node(G, (10, 22) )
    # make_grass_node(G, (11, 7) )
    # make_vertical_river(G, (11, 23) ) going upwards
    # make_vertical_river(G, (13, 5) ) going downwards
    # make_vertical_river(G, (13, 25) ) going upwards
    # make_grass_node(G, (14, 26) )
    # make_grass_node(G, (16, 4) )
    # make_grass_node(G, (17, 5) )
    # make_horizontal_river(G, (18, 6) ) going to left
    # make_horizontal_river(G, (20, 8) ) going to left
    # make_grass_node(G, (22, 10) )
    # make_grass_node(G, (24, 12) )
    # make_grass_node(G, (25, 13) )
    # make_horizontal_river(G, (27, 15) ) going to left
    # make_grass_node(G, (26, 16) )
    # make_grass_node(G, (25, 17) )
    # make_grass_node(G, (23, 19) )
    # make_horizontal_river(G, (21, 21) ) going to right
    # make_grass_node(G, (19, 23) )
    # make_grass_node(G, (17, 25) )
    # make_grass_node(G, (16, 26) )
    # make_grass_node(G, (2, 15) )
    # make_grass_node(G, (3, 14) )
    # make_grass_node(G, (4, 17) )
    # make_vertical_river(G, (5, 12) ) going upwards
    # make_grass_node(G, (5, 18) )
    # make_grass_node(G, (6, 19) )
    # make_grass_node(G, (7, 10) )
    # make_grass_node(G, (8, 21) )
    # make_grass_node(G, (9, 8) )
    # make_grass_node(G, (9, 22) )
    # make_horizontal_river(G, (10, 7) ) going to right
    # make_horizontal_river(G, (11, 6) ) going to left
    # make_grass_node(G, (11, 24) )
    # make_grass_node(G, (13, 4) )
    # make_grass_node(G, (13, 26) )
    # make_grass_node(G, (14, 27) )
    # make_grass_node(G, (15, 2) )
    # make_grass_node(G, (16, 3) )
    # make_grass_node(G, (17, 4) )
    # make_grass_node(G, (19, 6) )
    # make_grass_node(G, (21, 8) )
    # make_grass_node(G, (22, 9) )
    # make_tree(G, (24, 11) source_node
    # make_grass_node(G, (25, 12) )
    # make_grass_node(G, (26, 13) )
    # make_grass_node(G, (28, 15) )
    # make_grass_node(G, (27, 16) )
    # make_grass_node(G, (26, 17) )
    # make_horizontal_river(G, (24, 19) ) going to right
    # make_grass_node(G, (22, 21) )
    # make_horizontal_river(G, (20, 23) ) going to right
    # make_horizontal_river(G, (18, 25) ) going to right
    # make_grass_node(G, (16, 27) )
    # make_grass_node(G, (1, 15) )
    # make_grass_node(G, (2, 14) )
    # make_grass_node(G, (3, 13) )
    # make_horizontal_river(G, (3, 17) ) going to right
    # make_grass_node(G, (5, 11) )
    # make_grass_node(G, (5, 19) )
    # make_grass_node(G, (6, 10) )
    # make_vertical_river(G, (6, 20) ) going upwards
    # make_grass_node(G, (7, 9) )
    # make_grass_node(G, (7, 21) )
    # make_horizontal_river(G, (8, 22) ) going to right
    # make_grass_node(G, (9, 7) )
    # make_vertical_river(G, (10, 6) ) going upwards
    # make_vertical_river(G, (11, 25) ) going upwards
    # make_grass_node(G, (12, 4) )
    # make_grass_node(G, (13, 3) )
    # make_grass_node(G, (13, 27) )
    # make_grass_node(G, (14, 28) )
    # make_grass_node(G, (15, 1) )
    # make_vertical_river(G, (16, 2) ) going upwards
    # make_grass_node(G, (17, 3) )
    # make_horizontal_river(G, (18, 4) ) going to left
    # make_horizontal_river(G, (20, 6) ) going to left
    # make_grass_node(G, (22, 8) )
    # make_grass_node(G, (24, 10) )
    # make_grass_node(G, (25, 11) )
    # make_grass_node(G, (26, 12) )
    # make_horizontal_river(G, (27, 13) ) going to left
    # make_grass_node(G, (29, 15) )
    # make_grass_node(G, (28, 16) )
    # make_grass_node(G, (27, 17) )
    # make_grass_node(G, (25, 19) )
    # make_grass_node(G, (23, 21) )
    # make_grass_node(G, (19, 25) )
    # make_grass_node(G, (17, 27) )
    # make_grass_node(G, (16, 28) )
    # make_grass_node(G, (15, 29) )
    # make_grass_node(G, (1, 14) )
    # make_grass_node(G, (1, 16) )
    # make_grass_node(G, (2, 13) )
    # make_grass_node(G, (2, 17) )
    # make_horizontal_river(G, (3, 12) ) going to right
    # make_grass_node(G, (4, 19) )
    # make_grass_node(G, (5, 10) )
    # make_grass_node(G, (6, 9) )
    # make_grass_node(G, (6, 21) )
    # make_grass_node(G, (7, 8) )
    # make_vertical_river(G, (7, 22) ) going upwards
    # make_vertical_river(G, (8, 7) ) going upwards
    # make_grass_node(G, (9, 24) )
    # make_vertical_river(G, (11, 4) ) going downwards
    # make_grass_node(G, (11, 26) )
    # make_grass_node(G, (12, 27) )
    # make_grass_node(G, (13, 2) )
    # make_vertical_river(G, (14, 1) ) going upwards
    # make_grass_node(G, (14, 29) )
    # make_grass_node(G, (16, 1) )
    # make_grass_node(G, (17, 2) )
    # make_grass_node(G, (19, 4) )
    # make_grass_node(G, (21, 6) )
    # make_grass_node(G, (23, 8) )
    # make_grass_node(G, (24, 9) )
    # make_grass_node(G, (25, 10) )
    # make_grass_node(G, (26, 11) )
    # make_grass_node(G, (28, 13) )
    # make_grass_node(G, (29, 14) )
    # make_grass_node(G, (29, 16) )
    # make_grass_node(G, (28, 17) )
    # make_grass_node(G, (27, 18) )
    # make_horizontal_river(G, (24, 21) ) going to right
    # make_grass_node(G, (22, 23) )
    # make_horizontal_river(G, (20, 25) ) going to right
    # make_horizontal_river(G, (18, 27) ) going to right
    # make_grass_node(G, (16, 29) )
    # make_grass_node(G, (1, 13) )
    # make_grass_node(G, (1, 17) )
    # make_grass_node(G, (2, 12) )
    # make_grass_node(G, (3, 11) )
    # make_horizontal_river(G, (3, 19) ) going to right
    # make_vertical_river(G, (5, 9) ) going downwards
    # make_horizontal_river(G, (8, 6) ) going to left
    # make_horizontal_river(G, (8, 24) ) going to right
    # make_grass_node(G, (10, 4) )
    # make_grass_node(G, (11, 3) )
    # make_grass_node(G, (11, 27) )
    # make_grass_node(G, (12, 2) )
    # make_grass_node(G, (12, 28) )
    # make_grass_node(G, (13, 29) )
    # make_grass_node(G, (17, 1) )
    # make_horizontal_river(G, (20, 4) ) going to left
    # make_grass_node(G, (23, 7) )
    # make_horizontal_river(G, (24, 8) ) going to left
    # make_horizontal_river(G, (25, 9) ) going to right
    # make_horizontal_river(G, (27, 11) ) going to left
    # make_grass_node(G, (29, 13) )
    # make_grass_node(G, (29, 17) )
    # make_grass_node(G, (28, 18) )
    # make_grass_node(G, (27, 19) )
    # make_grass_node(G, (25, 21) )
    # make_grass_node(G, (23, 23) )
    # make_grass_node(G, (22, 24) )
    # make_grass_node(G, (21, 25) )
    # make_grass_node(G, (19, 27) )
    # make_grass_node(G, (17, 29) )
    # make_grass_node(G, (1, 12) )
    # make_grass_node(G, (1, 18) )
    # make_grass_node(G, (2, 11) )
    # make_grass_node(G, (2, 19) )
    # make_grass_node(G, (3, 10) )
    # make_grass_node(G, (4, 21) )
    # make_grass_node(G, (5, 8) )
    # make_vertical_river(G, (5, 22) ) going upwards
    # make_vertical_river(G, (6, 7) ) going upwards
    # make_grass_node(G, (7, 24) )
    # make_grass_node(G, (9, 4) )
    # make_grass_node(G, (9, 26) )
    # make_grass_node(G, (10, 3) )
    # make_grass_node(G, (10, 27) )
    # make_vertical_river(G, (12, 1) ) going upwards
    # make_grass_node(G, (12, 29) )
    # make_grass_node(G, (18, 1) )
    # make_grass_node(G, (19, 2) )
    # make_grass_node(G, (21, 4) )
    # make_grass_node(G, (22, 5) )
    # make_grass_node(G, (23, 6) )
    # make_grass_node(G, (25, 8) )
    # make_grass_node(G, (26, 9) )
    # make_grass_node(G, (28, 11) )
    # make_grass_node(G, (29, 12) )
    # make_grass_node(G, (29, 18) )
    # make_grass_node(G, (28, 19) )
    # make_grass_node(G, (27, 20) )
    # make_horizontal_river(G, (24, 23) ) going to right
    # make_grass_node(G, (22, 25) )
    # make_horizontal_river(G, (20, 27) ) going to right
    # make_grass_node(G, (1, 11) )
    # make_grass_node(G, (1, 19) )
    # make_horizontal_river(G, (2, 10) ) going to left
    # make_grass_node(G, (4, 8) )
    # make_grass_node(G, (5, 23) )
    # make_grass_node(G, (6, 6) )
    # make_grass_node(G, (6, 24) )
    # make_horizontal_river(G, (8, 4) ) going to left
    # make_vertical_river(G, (8, 26) ) going upwards
    # make_grass_node(G, (9, 27) )
    # make_grass_node(G, (10, 2) )
    # make_grass_node(G, (10, 28) )
    # make_grass_node(G, (11, 29) )
    # make_grass_node(G, (19, 1) )
    # make_grass_node(G, (23, 5) )
    # make_horizontal_river(G, (24, 6) ) going to left
    # make_grass_node(G, (26, 8) )
    # make_horizontal_river(G, (27, 9) ) going to left
    # make_grass_node(G, (29, 11) )
    # make_grass_node(G, (29, 19) )
    # make_grass_node(G, (28, 20) )
    # make_grass_node(G, (27, 21) )
    # make_grass_node(G, (25, 23) )
    # make_grass_node(G, (23, 25) )
    # make_grass_node(G, (22, 26) )
    # make_grass_node(G, (21, 27) )
    # make_grass_node(G, (19, 29) )
    # make_grass_node(G, (1, 10) )
    # make_grass_node(G, (1, 20) )
    # make_grass_node(G, (2, 21) )
    # make_horizontal_river(G, (3, 8) ) going to left
    # make_horizontal_river(G, (3, 22) ) going to right
    # make_grass_node(G, (5, 24) )
    # make_grass_node(G, (6, 5) )
    # make_grass_node(G, (6, 25) )
    # make_grass_node(G, (7, 4) )
    # make_horizontal_river(G, (8, 27) ) going to right
    # make_grass_node(G, (9, 2) )
    # make_vertical_river(G, (10, 1) ) going upwards
    # make_grass_node(G, (10, 29) )
    # make_grass_node(G, (20, 1) )
    # make_grass_node(G, (21, 2) )
    # make_grass_node(G, (22, 3) )
    # make_grass_node(G, (23, 4) )
    # make_grass_node(G, (25, 6) )
    # make_grass_node(G, (26, 7) )
    # make_grass_node(G, (28, 9) )
    # make_grass_node(G, (29, 10) )
    # make_grass_node(G, (29, 20) )
    # make_grass_node(G, (28, 21) )
    # make_grass_node(G, (27, 22) )
    # make_horizontal_river(G, (24, 25) ) going to right
    # make_grass_node(G, (22, 27) )
    # make_grass_node(G, (1, 21) )
    # make_grass_node(G, (2, 22) )
    # make_grass_node(G, (4, 6) )
    # make_vertical_river(G, (4, 24) ) going downwards
    # make_grass_node(G, (5, 5) )
    # make_vertical_river(G, (6, 26) ) going upwards
    # make_vertical_river(G, (8, 2) ) going upwards
    # make_grass_node(G, (9, 29) )
    # make_grass_node(G, (21, 1) )
    # make_grass_node(G, (23, 3) )
    # make_horizontal_river(G, (24, 4) ) going to left
    # make_grass_node(G, (26, 6) )
    # make_horizontal_river(G, (27, 7) ) going to left
    # make_grass_node(G, (29, 9) )
    # make_grass_node(G, (29, 21) )
    # make_grass_node(G, (28, 22) )
    # make_grass_node(G, (27, 23) )
    # make_grass_node(G, (25, 25) )
    # make_grass_node(G, (23, 27) )
    # make_grass_node(G, (22, 28) )
    # make_grass_node(G, (21, 29) )
    # make_grass_node(G, (1, 8) )
    # make_grass_node(G, (1, 22) )
    # make_horizontal_river(G, (3, 6) ) going to left
    # make_horizontal_river(G, (3, 24) ) going to right
    # make_grass_node(G, (5, 4) )
    # make_grass_node(G, (6, 3) )
    # make_grass_node(G, (6, 27) )
    # make_vertical_river(G, (8, 29) ) going upwards
    # make_grass_node(G, (22, 1) )
    # make_grass_node(G, (23, 2) )
    # make_grass_node(G, (25, 4) )
    # make_grass_node(G, (26, 5) )
    # make_grass_node(G, (28, 7) )
    # make_grass_node(G, (29, 8) )
    # make_grass_node(G, (29, 22) )
    # make_grass_node(G, (26, 25) )
    # make_horizontal_river(G, (24, 27) ) going to right
    # make_grass_node(G, (22, 29) )
    # make_grass_node(G, (1, 7) )
    # make_grass_node(G, (1, 23) )
    # make_grass_node(G, (2, 6) )
    # make_grass_node(G, (2, 24) )
    # make_vertical_river(G, (4, 4) ) going downwards
    # make_vertical_river(G, (6, 2) ) going upwards
    # make_grass_node(G, (6, 28) )
    # make_grass_node(G, (23, 1) )
    # make_grass_node(G, (26, 4) )
    # make_horizontal_river(G, (27, 5) ) going to left
    # make_grass_node(G, (29, 7) )
    # make_grass_node(G, (28, 24) )
    # make_grass_node(G, (26, 26) )
    # make_grass_node(G, (25, 27) )
    # make_grass_node(G, (23, 29) )
    # make_grass_node(G, (1, 6) )
    # make_grass_node(G, (1, 24) )
    # make_horizontal_river(G, (3, 4) ) going to left
    # make_horizontal_river(G, (3, 26) ) going to right
    # make_grass_node(G, (5, 28) )
    # make_grass_node(G, (6, 1) )
    # make_vertical_river(G, (6, 29) ) going upwards
    # make_grass_node(G, (24, 1) )
    # make_grass_node(G, (25, 2) )
    # make_grass_node(G, (26, 3) )
    # make_grass_node(G, (28, 5) )
    # make_grass_node(G, (29, 6) )
    # make_grass_node(G, (27, 26) )
    # make_grass_node(G, (1, 5) )
    # make_grass_node(G, (1, 25) )
    # make_grass_node(G, (2, 4) )
    # make_grass_node(G, (2, 26) )
    # make_grass_node(G, (4, 28) )
    # make_grass_node(G, (25, 1) )
    # make_grass_node(G, (26, 2) )
    # make_horizontal_river(G, (27, 3) ) going to left
    # make_grass_node(G, (29, 5) )
    # make_grass_node(G, (28, 26) )
    # make_horizontal_river(G, (27, 27) ) going to right
    # make_grass_node(G, (25, 29) )
    # make_grass_node(G, (1, 4) )
    # make_grass_node(G, (1, 26) )
    # make_grass_node(G, (4, 1) )
    # make_vertical_river(G, (4, 29) ) going upwards
    # make_grass_node(G, (26, 1) )
    # make_grass_node(G, (28, 3) )
    # make_grass_node(G, (29, 4) )
    # make_grass_node(G, (29, 26) )
    # make_grass_node(G, (28, 27) )
    # make_grass_node(G, (26, 29) )
    # make_grass_node(G, (1, 3) )
    # make_grass_node(G, (1, 27) )
    # make_grass_node(G, (2, 2) )
    # make_grass_node(G, (2, 28) )
    # make_grass_node(G, (3, 1) )
    # make_grass_node(G, (29, 3) )
    # make_grass_node(G, (29, 27) )
    # make_grass_node(G, (1, 2) )
    # make_grass_node(G, (1, 28) )
    # make_grass_node(G, (2, 1) )
    # make_grass_node(G, (28, 1) )
    # make_grass_node(G, (29, 2) )
    # make_grass_node(G, (29, 28) )
    # make_grass_node(G, (28, 29) )
    # make_grass_node(G, (1, 1) )
    # make_grass_node(G, (1, 29) )
    # make_grass_node(G, (29, 1) )
    # make_grass_node(G, (29, 29) )




    return G

# function that calls the appropriate replacement function
def check_for_empty_nodes(G):
    for node in G.nodes:
        if G.nodes[node]['type'] == 'empty':
            return True
    return False

def execute_replacement(G, function_to_call, source_node):
    if function_to_call in globals() and callable(globals()[function_to_call]):
        function = globals()[function_to_call]
        G = function(G, source_node)
    return G
